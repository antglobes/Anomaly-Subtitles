-- ======================================================================
--[[	MCM ARGB Input Widget
-- ======================================================================
    Author: Catspaw (CatspawMods @ ModDB)
    Source: https://github.com/CatspawMods/Anomaly-Addon-Archive

    Turns any MCM "Input" element with a string value into an ARGB widget
    that takes the resulting user-selected ARGB values and composes them 
    as a comma-separated string like "255,255,255,255", which is then 
    cached to the string value of the Input element.

	Uses the ui_hook_functor feature added in MCM 1.7.
    
    The basic form is:

    { id = "my_argb_ctrl", type = "input", val = 0, 
    	def = "255,255,255,255",
		ui_hook_functor = { ui_mcm_argb_input.init_mcm_argb_control }
	}

	Other options are available, passed via attributes in the element.

	See "FUNCTOR USAGE" below for more details.
-- ====================================================================]]
script_name     = "ui_mcm_argb_input"
script_version  = "2.1.1"
release_date    = 20250428
-- ======================================================================
local UIMCM, UIMM
RegisterScriptCallback("main_menu_on_init", ( function(m)  UIMM = m end ))

function mcm_cache_value(path, opt, value, v)
	-- 	Basically just a wrapper function for UI_MCM:CacheValue()
	--	CacheValue can't be called directly without getting the object of
	-- 	the active MCM instance. If you try to do this with any generic 
	-- 	instance of ui_mcm.UI_MCM(), it'll crash.

	UIMCM = UIMM.mcm_dlg
	if (not UIMCM) or ui_mcm.is_gathering() then return end
	UIMCM:CacheValue(path, opt, value, v)
end

function mcm_get_value(path, opt, v, flags)
	UIMCM = UIMM.mcm_dlg
	if (not UIMCM) or ui_mcm.is_gathering() then return end
	return UIMCM:GetValue(path, opt, v, flags)
end

-- ======================================================================
-- 		Utilities
-- ======================================================================

local xml = CScriptXmlInit()
local unsquish_ratio = 1
local wnds = {}

function unsquish(width)
    return (width or 0) * (unsquish_ratio or 1)
end

function update_unsquish_ratio()
    unsquish_ratio  = (device().height / device().width) / (768 / 1024)
    return unsquish_ratio
end

function play_sfx(snd)
    snd:play(db.actor, 0, sound_object.s2d)
end

function play_snd_path(snd_path)
    play_sfx(snd_path and xr_sound.get_safe_sound_object(snd_path))
end

-- ======================================================================
--[[ 		Simple parameterized button
-- ======================================================================
	USAGE: SimpleButton(anchor, button, flags)

	[anchor] is the static or other UI container to use as a parent. Can be
	omitted, in which case the button will be parented to itself and
	coordinates are relative to the upper left of the screen.

	[button] is required, and can be any unique string that is a valid Lua
	identifier.

	[flags] is a table of arguments, which must contain one of the 
	following:
		1. flags.xml, an XML object with a file already parsed
		2. flags.xmlfile, a string filename which will be parsed

	It has no default position or behavior. You need to customize it with
	one or more of the following flags for it to be useful:

		func_onclick: a direct pointer to a function that does anything
			This is not strictly required, but without a functor to 
			execute, the button does nothing other than highlight when 
			you hover it.

		snd_onclick: an optional string path to a sound effect

		pos_x, pos_y: moves it to where you want it, defaults to 0,0
			Not really needed if your button XML has baked-in xy coords,
			or if you're otherwise handling its position.

		texture: replace the button texture used
			Texture should have enable, highlight, and touch variants

		xmlnode: name of the XML node for the button
			Optional, defaults to "btn"

	See the init_mcm_argb_control() function below for usage examples.

-- ====================================================================]]
class "SimpleButton" (CUIScriptWnd)

function SimpleButton:__init(anchor, button, flags) super()
	self:SetAutoDelete(true)
	if not (button and flags and (flags.xml or flags.xmlfile)) then return end
	self.button 	= button
	self.anchor 	= anchor
   	self.flags 		= flags or {}
	self.xml 		= flags.xml or CScriptXmlInit()
	if flags.xmlfile and not flags.xml then
		self.xml:ParseFile(self.flags.xmlfile)
	end
    local buttonx 	= "btn_" .. self.button
    self.btn 		= self.xml:Init3tButton(flags.xmlnode or "btn", self.anchor or self)
    self:Register(self.btn, buttonx)
    if flags.texture then
    	self.btn:InitTexture(self.flags.texture)
    end

    if self.flags.pos_x or self.flags.pos_y then
		self.btn:SetWndPos(vector2():set(self.flags.pos_x or 0, self.flags.pos_y or 0))
    end

   	self:AddCallback(buttonx, ui_events.BUTTON_CLICKED, self.OnClick, self)
end

function SimpleButton:OnClick()
	if self.flags.func_onclick then
		self.flags.func_onclick(self)
	end
	if self.flags.snd_onclick then
		play_snd_path(self.flags.snd_onclick)
	end
end

function SimpleButton:ShowControl(onoff)
	self.btn:Show(onoff)
end

-- ======================================================================
-- 		ARGB Control UI class
--	See FUNCTOR USAGE below for details
-- ======================================================================
class "UIARGBControl" (CUIScriptWnd)

function UIARGBControl:Update()
    CUIScriptWnd.Update(self)
end

function UIARGBControl:__init(anchor, handlers, opts, flags) super()
	self:SetAutoDelete(true)
	local input 	= "input_"
	local opt 		= opts and opts.id or ""
	self.base_id 	= input .. opt .. "_"
	self.anchor 	= anchor or self
	self.opts 		= opts or {}
	self.flags 		= flags or {}
	self.path 		= flags.path or ""
	self.opt 		= flags.opt or opts.id or ""
	self.opt_id 	= ui_mcm.cc(self.path, self.opt)
  	self.argb 		= { a = 255, r = 255, g = 255, b = 255 }
	self.ctrl 		= {}
	self.icon 		= {}
	self.text 		= {}
	self.icon_w 	= unsquish(16)
	self.icon_h 	= 16
	self.elem_w 	= 0

	self:InitControls()
	self:ShowControls(false)
    --local _ = DEV_DEBUG and printf("[UIARGBControl:_init] Completed for %s", self.opt_id)
end

function UIARGBControl:SetupControl(color, x, y)
	if not self.dialog then return end
	if self.ctrl[color] then return end
	local ctrl_id 		= self.base_id .. color
	self.icon[color] 	= xml:InitStatic(self.opts.xmlnode_clricon or "argb_chrome:clr_icon_" .. color, self.dialog)
	self.icon[color]:SetWndSize(vector2():set(self.icon_w, 16))
	self.icon[color]:SetWndPos(vector2():set(x or 0, (y or 0) + 1.5))
	if self.opts.no_color_icons then
		self.icon[color]:InitTexture("")
	end
	if self.opts.text_labels then
		printf("Setting up colorblind control")
		local overlay = xml:InitStatic(self.opts.xmlnode_clricon or "argb_chrome:clr_icon_" .. color, self.dialog)
		overlay:SetWndSize(vector2():set(self.icon_w, 16))
		overlay:SetWndPos(vector2():set(x or 0, (y or 0) + 1.5))
		overlay:InitTexture("ui_mcm_catsy_argb_text_"..color)
	end
	self.icon_size 		= self.icon[color]:GetWidth()
	self.ctrl[color] 	= xml:InitEditBox(self.opts.xmlnode_inputbox or "argb_chrome:input", self.dialog)
	self.ctrl[color]:SetWndSize(vector2():set(unsquish(30), 20))
	self.ctrl[color]:SetWndPos(vector2():set((x or 0) + unsquish(18), y or 0))
	self.text[color] 	= xml:InitTextWnd(self.opts.xmlnode_textbox or "textbox", self.dialog)
	self.text[color]:SetWndSize(vector2():set(unsquish(30), 20))
	self.text[color]:SetWndPos(vector2():set(2 + (x or 0) + unsquish(18), 2 + (y or 0)))
	self:SetColorText(color, self.argb[color])

	self:Register(self.ctrl[color], ctrl_id)
	self:AddCallback(ctrl_id, ui_events.EDIT_TEXT_COMMIT, (
		function()
			local ctrl 	= self.ctrl[color]
			local text 	= ctrl:GetText()
			local value	= text and tonumber(text)
			if (not value) then
				self:SetColor(color, self.argb[color])
				return
			end			
			self:SetColor(color, value)
		end
	))
	self.elem_w = unsquish(5) + self.icon_size + self.ctrl[color]:GetWidth()
end

function UIARGBControl:InitControls()
	if self.opts.preset_args then
		for k,v in pairs(self.opts.preset_args) do
			self.opts[k] = v
		end
	end
	self.init_value = mcm_get_value(self.path, self.opt, self.opts, self.flags)
	self.init_argb 	= self:GetColorsFromString(self.init_value)
	self.argb 		= self.init_argb and dup_table(self.init_argb) or self.argb

	self.dialog = xml:InitStatic(self.opts.xmlnode_dialog or "box", self.anchor)
	self.dialog:SetWndPos(vector2():set(self.opts.dialog_x or 320, self.opts.dialog_y or 0))
	self.dialog:SetWndSize(vector2():set(unsquish(self.opts.dialog_w or 220), self.opts.dialog_h or 30))
	
	self.chrome = xml:InitStatic(self.opts.xmlnode_chrome or "argb_chrome", self.dialog)
	self.chrome:SetWndPos(vector2():set(0, 0))
	self.chrome:SetWndSize(vector2():set(unsquish(self.opts.dialog_w or 220), self.opts.dialog_h or 30))
	self.chrome:InitTexture(self.opts.chrome_tex or "ui_mcm_catsy_argb_chrome60")

	self:SetupControl("a", unsquish(5), 5)
	self:SetupControl("r", unsquish(5) + self.elem_w, 5)
	self:SetupControl("g", unsquish(5) + (self.elem_w * 2), 5)
	self:SetupControl("b", unsquish(5) + (self.elem_w * 3), 5)

	if self.opts.preview_tex then
		local w = self.opts.preview_w or 24
		local h = self.opts.preview_h or w
		local x = self.opts.preview_x or 0
		local y = self.opts.preview_y or 0
		self.preview = xml:InitStatic(self.opts.xmlnode_preview or "box", self.opts.anchor_on_dialog and self.dialog or self.anchor)
		self.preview:InitTexture(self.opts.preview_tex)
		self.preview:SetWndSize(vector2():set(unsquish(w), h))
		self.preview:SetWndPos(vector2():set(x, y))
	end
	self:UpdatePreviewStatic()
end

function UIARGBControl:GetColorsFromString(csv)
    local c = csv and str_explode(csv, ",")
    return c and {
        a = c[1] or 255,
        r = c[2] or 255,
        g = c[3] or 255,
        b = c[4] or 255,
    } or {}
end

function UIARGBControl:GetStringFromColors(c)
	c = c or {}
	local str = string.format("%s,%s,%s,%s", c.a or 0, c.r or 0, c.g or 0, c.b or 0)
	return str
end

function UIARGBControl:SetColorText(color, text)
	if not (self.ctrl[color] and self.text[color]) then return end
	self.ctrl[color]:SetText(text or "")
	self.text[color]:SetText(text or "")
end

function UIARGBControl:UpdateColorText(color)
	self:SetColorText(color, tostring(self.argb[color]) or "")
end

function UIARGBControl:UpdateColors()
	for color,_ in pairs(self.argb) do
		self:UpdateColorText(color)
	end
end

function UIARGBControl:UpdatePreviewStatic()
	if self.opts.preview_func then
		self.preview = self.opts.preview_func(self.path, self.opt, self.opts, self.flags)
	end
	if not self.preview then return end
	local c 	= self.argb
	local argb 	= GetARGB(c.a, c.r, c.g, c.b)
	self.preview:SetTextureColor(argb)
end

function UIARGBControl:SetColor(color, value)
	value = value and clamp(tonumber(value) or 0, 0, 255) or 0
	self.argb[color] = value
	self:SetColorText(color, tostring(value))
	self:UpdatePreviewStatic()
end

function UIARGBControl:ShowControls(onoff)
	if onoff then
		if not self.dialog then
			self:InitControls()
		end
		if self.dialog then
			self.chrome:Show(true)
			for color,_ in pairs(self.argb) do
				self.chrome:Show(true)
				self.ctrl[color]:Show(true)
				self.text[color]:Show(false)
			end
		end
	else
		self.chrome:Show(false)
		for color,_ in pairs(self.argb) do
			self.chrome:Show(false)
			self.ctrl[color]:Show(false)
			self.text[color]:Show(true)
		end
	end
	self:UpdateColors()
end

function UIARGBControl:MCMSetCachedValue()
	--local _ = DEV_DEBUG and printf("[UIARGBControl:MCMSetCachedValue] Setting new cached ARGB value in MCM")
	local c = self.argb or {}
	local str = self:GetStringFromColors(c)
	mcm_cache_value(self.path, self.opt, str, self.opts)
end

function UIARGBControl:MCMRevertCachedValue()
	--local _ = DEV_DEBUG and printf("[UIARGBControl:MCMRevertCachedValue] Discarding changes and reverting to original ARGB values")
	self.argb = dup_table(self.init_argb) or self.argb
	self:UpdateColors()
	self:UpdatePreviewStatic()
end

-- ======================================================================
--[[ 	Launcher function for ui_hook_functor
-- ======================================================================
	REQUIRES:
		* MCM 1.7.0 or higher
		* configs\ui\ui_argb_control.xml (or your own UI file)
		* configs\ui\textures_descr\ui_argb_control_texd.xml (or yours)
		* textures\catsy\ui_argb_control.dds (or yours)

	FUNCTOR USAGE:
		Invoke by adding the following ui_hook_functor to any MCM Input
		element that has a string value:

	ui_hook_functor = { ui_mcm_argb_input.init_mcm_argb_control }

	All of the following arguments are optional, and are added to the
	same Input element as attributes:
		xml 				Pass your own XML object with pre-parsed file

		xmlfile 			Pass your own XML file to be parsed

		xmlnode_dialog 		Use this instead of "box" for the base dialog
							container (no visible texture), must be large
							enough to be underneath all input elements.

		xmlnode_chrome 		Use this instead of "argb_chrome" for
							the UI frame texture container

		xmlnode_inputbox 	Use this instead of "argb_chrome:input" for
							the InputBox element

		xmlnode_textbox		Use this instead of "textbox" for the text
							container that shows the channel value when
							the control is inactive

		xmlnode_clricon 	Use this instead of "argb_chrome:clr_icon_"
							for the color icons, each of which gets the
							string "a", "r", "g", or "b" suffixed to it

		xmlnode_preview 	Use this instead of "box" for the image
							container used when setting up icon previews

		chrome_tex 			Texture to use for the dialog frame

		dialog_w 			Width of the ARGB control dialog and frame
		dialog_h  			Height of the ARGB control dialog and frame

		dialog_x 			Position of the dialog, relative to its
		dialog_y  			parent element

		colorblind 			Use an alternative blue color scheme for the
							default "accept" button instead of green

		no_color_icons 		Disables the icons representing each color 
							channel

		text_labels  		Adds "A/R/G/B" text to label each of the color
							channels, can be used as an overlay on top of
							the default color icons - recommended for use
							with colorblind mode

		btn_cancel_tex 		Texture to use for the cancel button

		btn_accept_tex 		Texture to use for the accept button

		btn_edit_tex 		Texture to use for the open/edit button

		preview_func 		Pointer to a function that should return the
							UI static with a texture, which the script
							should treat as the preview static--changing
							the color of its texture in response to user
							input.

		preview_tex 		Texture to initialize as a preview for the
					 		user's current color choices, if you want
					 		this script to handle setting it up instead.

		preview_w 			Size of the preview texture (default 24x24)
		preview_h

		preview_x 			Position of the preview texture
		preview_y

		anchor_on_dialog 	If true, preview will be anchored on the
							ARGB dialog, and will be hidden when the
							control dialog is inactive - otherwise
							the preview will always be displayed

		ui_snd_path 		Path to sound effect that will play when
							a button is clicked, otherwise it's silent

	If you pass your xml or xmlfile arguments, the XML content you pass
	must have the same node structure as in ui_argb_control.xml unless
	you override the defaults using the "xmlnode" attributes above.
-- ====================================================================]]

function init_mcm_argb_control(anchor, handlers, opts, flags)
	xml = CScriptXmlInit()
	xml:ParseFile("ui_argb_control.xml")
	if not (anchor and opts and flags) then return end
	update_unsquish_ratio()
	local opt_tbl 		= dup_table(opts)
	local flag_tbl 		= dup_table(flags)
	flag_tbl.ctrl_id 	= ui_mcm.cc(flag_tbl.path, flag_tbl.opt)
	local linked 		= tostring(flag_tbl.ctrl_id)
	if handlers and handlers.ctrl then
		handlers.ctrl:Show(false)
	end
	
	local id_close	= flag_tbl.ctrl_id .. "_close"
	local id_open 	= flag_tbl.ctrl_id .. "_open"

	wnds[id_close] 	= SimpleButton(anchor, flag_tbl.ctrl_id, { 
		ctrl_id 	= linked,
		xml  		= xml,
		opts 		= opt_tbl,
		xmlnode 	= "btn",
		texture 	= opt_tbl.btn_cancel_tex or "ui_catsy_button_redx80" ..(opt_tbl.colorblind and "cb" or ""),
		pos_x 		= 284,
		pos_y 		= 3,
		snd_onclick = opt_tbl.ui_snd_path or nil,
		func_onclick= (
			function(self)
				wnds[self.button]:ShowControls(false)
				self:ShowControl(false)
				wnds[id_open].open = false
				wnds[id_open].btn:InitTexture(self.flags.opts.btn_edit_tex or "ui_catsy_button_worn80")
				wnds[self.button]:MCMRevertCachedValue()
			end
		)
	})
	wnds[id_close]:ShowControl(false)

	
	wnds[id_open] 	= SimpleButton(anchor, flag_tbl.ctrl_id, { 
		ctrl_id 	= linked,
		close_id 	= id_close,
		xml 		= xml,
		opts 		= opt_tbl,
		xmlnode 	= "btn",
		texture 	= opt_tbl.btn_edit_tex or "ui_catsy_button_worn80",
		pos_x 		= 300.5,
		pos_y 		= 3,
		snd_onclick = opt_tbl.ui_snd_path or nil,
		func_onclick= (
			function(self)
				self.open = not self.open
				if self.open then
					wnds[self.button]:ShowControls(true)
					wnds[self.flags.close_id]:ShowControl(true)
					self.btn:InitTexture(self.flags.opts.btn_accept_tex or ("ui_catsy_button_check80" ..(self.flags.opts.colorblind and "cb" or "")))
				else
					wnds[self.button]:ShowControls(false)
					wnds[self.flags.close_id]:ShowControl(false)
					self.btn:InitTexture(self.flags.opts.btn_edit_tex or "ui_catsy_button_worn80")
					wnds[self.button]:MCMSetCachedValue()
				end
			end
		)
	})

	wnds[flag_tbl.ctrl_id] 			= UIARGBControl(anchor, handlers, opt_tbl, flag_tbl)
end

-- ======================================================================
