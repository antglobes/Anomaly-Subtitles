--  Boolean Functions
function is_only_match(str, pattern)
	return true and all_matches(str, pattern) == 1 or false
end

function has_translation(str)
    return game.translate_string(str) ~= str
end

-- String Mainpulation
function get_translation(str,...)
    if not has_translation(str) then return "No translation" end

    local string = game.translate_string(str)

    if (select('#',...) >= 1) then
        local i = 0
        local p = {...}
        local function sr()
            i = i + 1
            if (type(p[i]) == "userdata") then
                return "userdata"
            end
            return tostring(p[i])
        end
        string = string.gsub(string,"%%s",sr)
    end

    return string
end

function capitalise(str)
    return (str:gsub("^%l", string.upper))
end

function sentence_case(str)
    local sentence = ""
     for word in string.gmatch(str, "%S+") do
        sentence = sentence.." ".. capitalise(word)
     end
    return sentence
end

function split(str, sep)
    local tbl = {}
    if not sep then
        sep = "%s"
    end
    for ele in string.gmatch(str, "([^" .. sep .. "]+)") do
        tbl[#tbl + 1] = ele
    end
    return tbl
end

function list_pattern_occurances(str, pattern, limit)
    local s = {}
    local function search(str, substr, callback, init)
       init = init or 1
       local first, last = str:find(substr, init)
       if first then
            if limit and first >= limit and init < limit then
                for i=1, #str, last do
                    s[#s + 1] = str:sub(i, i + first - 1)
                end
            end            
           --callback(str, first, last)
           return search(str, substr, callback, first + 1)
       end
    end
    search(str, pattern, printf)
    return s
end

function split_by_chunk(text, chunkSize)
    local s = {}
    for i=1, #text, chunkSize do
        s[#s+1] = text:sub(i,i+chunkSize - 1)
    end
    return s
end

function split_by_punc(subtitle, CHAR_LIMT)
	tokens = list_pattern_occurances(subtitle, "[,!?.]", CHAR_LIMT)
	return #tokens >= 1 and tokens or {subtitle}
end

function replace(string, patterns, repl)
	for _, pattern in pairs(patterns) do
		string = string:gsub(pattern, repl)
	end
	return string
end

function slashes_to_underscores(string)
	return replace(string, {"/", "\\"}, "_")
end


function exclude_str(string, pattern)
    if not string or not pattern then return end
	--pr(strformat("Finding %s in %s", pattern, string))
    local start, _end = string.find(string, pattern)
	if not (start or _end) then return false end
    local targ_str = {}

    for i=1, #string do
        if i < start or i > _end then
            table.insert(targ_str, i)
        end
    end

    local rlt_str = ""
    local min, max = math.min(unpack(targ_str)), math.max(unpack(targ_str))
    -- print("start end", start, _end)
    -- print("min max", min, max)
    
    if min > start and max > _end then
        return string.sub(string, min, max) 
    else
        if min < start then
            rlt_str = rlt_str .. string.sub(string, min, start - 1)   
        end

        if max > _end then
            rlt_str = rlt_str .. string.sub(string, _end + 1, max)  
        end
    end
    -- print(rlt_str)
    return rlt_str       
end

function remove_pattern(str, pattern, repl)
	return str:gsub(pattern, repl)
end

function remove_digits(str, repl)
	return remove_pattern(str, "[%d]", repl)
end

function remove_end_digits(str, repl)
	return remove_pattern(str, '[%d+$]+', repl)
end

function remove_trailing_underscore(str, repl)
	return remove_pattern(str, '[_]$', repl)
end

function extract_str(str, pattern, repl)
	return remove_pattern(str, strformat("[^%s]", pattern), repl)
end

function all_matches(str, pattern)
	local m = {}
	for match in str:gmatch(pattern) do
		m[#m + 1] = match
	end
	return m
end

function find_digits(str, pattern)
    local nums = {}
    for m in string.gmatch(str, pattern or "(%d+)") do
        nums[#nums + 1] = tonumber(m)
    end
    return nums
end

function find_suffix_num(str)
	return find_digits(str, "(%d+)$")
end