--[[-------------
Author(s): AntGlobes, VodoXleb
Purpose: Subtitles MCM setting
Last Modified: 20/10/24 
]]---------------

-- If you don't use MCM, change your defaults from here.

AddScriptCallback("as_on_option_change")

print_table = ag_tables.print_table

defaults = {
	enable_subs = true,
	hear_dist = 35,
	enable_debug = false,
	debug_level = "player",
	enable_faction_clr = false,
	colour_blind_type = "normal"
}

function pr(str, ...)
	subtitles_utils.dbg_pr("[AS|MCM]: %s", str, ...)
end

function get_config(key)
    if ui_mcm then return ui_mcm.get("subtitles/"..key) else return defaults[key] end
end

function debugging_enabled()
	return get_config("enable_debug")
end

function faction_clr_enabled()
	return get_config("enable_faction_clr")
end

function on_mcm_load()
    return { 
		id="subtitles",sh=true ,gr={
			{id="title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_subtitles_title",size= {512,50},spacing= 20 },
			{id="hear_dist", type = "track", val = 2, min=1,max=35,step=1, def = 25},
			{id="divider", type="line"},

			{id="title", type="title", text="ui_mcm_subtitles_title_accessiblity"},
			{id="enable_faction_clr", type="check", val=1, def=false},
			{id="colour_blind_type", type="list", val=0, def="normal", precondition={faction_clr_enabled},
				content={
					{"normal", "normal"},
					{"achromatopsia", "achromatopsia"},
					{"achromatomaly", "achromatomaly"},
					{"deuteranopia", "deuteranopia"},
					{"deuteranomaly", "deuteranomaly"},
					{"protanopia", "protanopia"},
					{"protanomaly", "protanomaly"},
					{"tritanopia", "tritanopia"},
					{"tritanomaly", "tritanomaly"},
				}
			},

			{id="divider", type="line"},
			{id="title_additional", type="title", text="ui_mcm_subtitles_title_additional"},
			{id="enable_subs", type = "check", val = 1, def = true},
			{id="enable_debug", type="check", val=1, def=false},
			{id="debug_level", type="list", val=0, def="player", precondition={debugging_enabled},
				content={
					{"player", "player"},
					{"dev", "dev"},
					{"all", "all"}
				}
			}
		}
    }
end

function on_option_change()
    pr("Loading AS Options:")
    local options = {}
    for k, _ in pairs(defaults) do
        options[k] = get_config(k)
    end
    SendScriptCallback("as_on_option_change", options)
    pr("%s", print_table(options))
end

function on_game_start()
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("actor_on_first_update", on_option_change)
end