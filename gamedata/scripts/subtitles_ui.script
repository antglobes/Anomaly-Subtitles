-- Imports
contains = ag_tables.contains
print_table = ag_tables.print_table
get_unknown_object = ag_game_objects.get_unknown_object
dist_to_pos = ag_game_objects.dist_to_pos
geo_ray = demonized_geometry_ray.geometry_ray
get_direction = ag_game_objects.get_direction

-- Utils
get_npc_faction = subtitles_utils.get_npc_faction
set_debug_level =  subtitles_utils.set_debug_level
filter_debug_msg = subtitles_utils.filter_debug_msg
str2ARGB = subtitles_utils.str2ARGB

-- MCM
MIN_CAPTION_OPACITY = 0
MAX_CAPTION_OPACITY = 255
FADE_TIME = 2
MAX_HEAR_DIST = 35
COLOUR_BLIND_TYPE = "normal"
ENABLE_FACTION_CLR = false
ENABLE_BACKGROUND = true
BACKGROUND_CLR = "80,255,255,255"

-- Variables
HUD = nil
clr_cache = {}
DESPAWNED_NPCS = {}
local dbg_lvl = "player"

-- Debugging
function pr(str, ...)
    if not filter_debug_msg(dbg_lvl) then return end
    subtitles_utils.dbg_pr("[AS|UI]: %s", str, ...)
end

class "UICaption"
function UICaption:__init(parent, npc_id)
    self.parent = parent
    self.npc_id = npc_id

    self.active_info = {}
    self.hearing_distance = MAX_HEAR_DIST

    self.bg = self.parent.xml:InitStatic("background", self.parent)
    self.caption = self.parent.xml:InitTextWnd("caption", self.parent)
    
    self.max_w = self.caption:GetWidth()
    self.max_h = self.caption:GetHeight()

    self.last_position = db.actor:position()
    self.last_material = nil
    
    self:ApplyScreenRatio(self.caption)
end

function UICaption:__finalize()
    self.bg:Show(false)
    self.caption:Show(false)
end

function UICaption:Update(show_caption)
    local tg = time_global()
    set_debug_level("all")

    local pos = self:GetScreenPosition()
    -- pr("Show caption: %s, valid screen pos?: %s", show_caption, self:ScreenPosValid(pos))
    if show_caption and self:ScreenPosValid(pos) then
        if is_empty(self.active_info) and is_not_empty(subtitles.QUEUED_SUBTITLES[self.npc_id]) then              
            self.active_info = table.remove(subtitles.QUEUED_SUBTITLES[self.npc_id], 1)
            pr("init active info with %s", print_table(self.active_info))
            self:AddTokensToCaption(tg)

        elseif is_not_empty(self.active_info) then
            
            -- Stage 1: Add/Update Caption until Sound Duration Reached
            if tg <= self.active_info["show_time"] and tg <= self.active_info["sound_duration"] 
                and tg >= self.active_info["caption_tmr"] and is_not_empty(self.active_info["tokens"]) then
                self:AddTokensToCaption(tg)
            end

            -- Stage 2: Once Sound Duration Reached Fade Caption until Show Time Reached
            if tg < self.active_info["show_time"] and tg >= self.active_info["sound_duration"]
                and tg >= self.active_info["fade_tmr"] then
                self:FadeCaption(tg)
            end

            -- Stage 3: Both Show Time and Sound Duration has been reached, Move to Next
            if tg >= self.active_info["show_time"] and tg >= self.active_info["sound_duration"] then
                pr("hiding caption for %s at %s", self.npc_id, self.active_info["show_time"])
                self.active_info = {}
                self.bg:Show(false)
                self.caption:Show(false)
                self.caption:SetText("")
                return
            end
        end

        if self:Validate(self.active_info) then
            self.bg:Show(true)
            self.caption:Show(true)
            self:SetCaptionClr()
            self:SetCaptionVec(pos)
           
        else
            self.bg:Show(false)
            self.caption:Show(false)
        end
    else
        self.bg:Show(false)
        self.caption:Show(false)
    end
end

function UICaption:AddTokensToCaption(tg)
    if is_empty(self.active_info) then return end
    if is_empty(self.active_info["tokens"]) then return end
    local sub_tkn = table.remove(self.active_info["tokens"], 1)
    local subtitle = self.caption:GetText() or ""
    self.caption:SetText(strformat("%s %s", subtitle, sub_tkn))
    self.active_info["caption_tmr"] = tg + (self.active_info["length"] / self.active_info["token_size"])
    --pr("Updating tokens to caption: subtitle %s, token: %s, tmr: %s", subtitle, sub_tkn, self.active_info["caption_tmr"])
end

function UICaption:FadeCaption(tg)
    set_debug_level("all")
    local cap_clr = self.caption:GetTextColor()
    local decrease = table.remove(self.active_info["decreases"], 1)
    local opacity_reduction = self.active_info["caption_opacity"] - decrease
    local cap_opacity = clamp(opacity_reduction, MIN_CAPTION_OPACITY, MAX_CAPTION_OPACITY)
    self.caption:SetTextColor(change_alpha(cap_clr, cap_opacity))

    local bg_clr = self.bg:GetTextureColor()
    local argb = float2argb(bg_clr, true)
    local bg_opacity_reduction = argb[1] - decrease
    local bg_opacity = clamp(bg_opacity_reduction, 0, argb[1])
    self.bg:SetTextureColor(change_alpha(bg_clr, bg_opacity))

    self.active_info["caption_opacity"] = cap_opacity
    self.active_info["fade_tmr"] = tg + (FADE_TIME / self.active_info["decreases_num"]) * 1000
    pr("fading caption from %s to %s", self.active_info["caption_opacity"], cap_opacity)
end

function UICaption:SetCaptionClr()
    local argb = GetARGB(self.active_info["caption_opacity"], 255, 255, 255)
    if ENABLE_FACTION_CLR then
        local npc = get_unknown_object({id=self.npc_id}, "game")
        argb = get_faction_clr(npc, self.active_info["caption_opacity"], COLOUR_BLIND_TYPE)
        ---pr("ARBG: %s", float2argb(argb, true))
    end
    -- pr("ARBG: %s", print_table(float2argb(argb, true)))
    self.caption:SetTextColor(argb)

    local clr_tbl = str2ARGB(BACKGROUND_CLR, true)
    local opacity = ENABLE_BACKGROUND and clr_tbl[1] or 0
    local bg_argb = get_colourblind_clr(clr_tbl, opacity, COLOUR_BLIND_TYPE)
    self.bg:SetTextureColor(bg_argb)
end

function UICaption:SetCaptionVec(pos)
    local npc = get_unknown_object({id=self.npc_id}, "game")
    local bone_pos =  npc:bone_position("bip01_head")

    local dist = dist_to_pos(db.actor, bone_pos)
    local scale = get_angular_dist(dist) / get_angular_dist(5)
    scale = clamp(scale, 0.45, 1)
    -- self.caption:SetWndSize(vector2():set(self.max_w * scale, self.max_h * scale))
    self.bg:SetWndSize(vector2():set(self.max_w * scale, self.max_h * scale))
    self.caption:SetWndSize(vector2():set(self.max_w * scale, self.max_h * scale))

    local add_y = warfare.lerp(0, 100, scale)
    -- pr("scale %s, dist: %s", scale, dist)
    self.bg:SetWndPos(vector2():set(pos.x, pos.y - add_y))
    self.caption:SetWndPos(vector2():set(pos.x, pos.y - add_y))
end

function UICaption:Validate(data)
    set_debug_level("all")
    if not data then
        pr("no data")
        return false
    end

    local npc = get_unknown_object({id=data.npc_id}, "game")
    if not npc then
        -- pr("no npc")
        return false
    end
    
    if not npc:alive() and not contains(subtitles.recent_npc_deaths, npc:id(), true) then
        -- pr("object dead")
        return false
    end

    local dist = distance_between(npc, db.actor)
    if round(dist) > self.hearing_distance then
        -- pr("object out of range: %s", dist)
        return false
    end
    
    local actor_pos = db.actor:bone_position("bip01_head") or db.actor:position()
    if not demonized_geometry_ray.vec_similar(actor_pos, self.last_position, 1) then
        local ray = geo_ray({
            ray_range = dist,
            visualize = subtitles_mcm.get_config("enable_debug") and dbg_lvl == "all",
            flags = 1 + 2 + 4,
        })

        local npc_pos = npc:bone_position("bip01_head") or npc:position():add(0, 1.7, 0)
        local dir_between = get_direction(npc_pos, actor_pos)
        local result = ray:get(npc_pos, dir_between).result

        self.last_position = actor_pos
        self.last_material = result.material_name
        pr("result: %s", result.material_name)
    end

    if self.last_material then
        return false
    end

    -- pr("valid npc")
    return true
end

-- From GhenTuong start
local caption_offset = vector():set(0.0,0.5,0.0)
local caption_height = 100

function UICaption:GetScreenPosition()
    local npc = get_unknown_object({id=self.npc_id}, "game")
    if not npc then
        return 
    end

    local hed = npc:bone_position("bip01_head")
	local pos = vector():add(hed,caption_offset)
   	local vec_pos = game.world2ui(pos,false,true)

	local vec_hed = game.world2ui(hed,false,true)
	if (self:ScreenPosValid(vec_pos) and (vec_hed.y - vec_pos.y < caption_height)) then
		local vec = game.world2ui(hed,false,false)
		if not (self:ScreenPosValid(vec)) then
			-- pr("not getting screen pos")
            return
		end
        local screen_pos = vector2():set(vec.x,vec.y - caption_height)
		-- pr("getting screen pos: %s", vec_to_str(screen_pos))
        return screen_pos
	else
        local screen_pos = game.world2ui(pos,false,false)
        -- pr("getting screen pos: %s", vec_to_str(screen_pos))
		return screen_pos
	end
end

function UICaption:ScreenPosValid(vec)
	return vec and (vec.x ~= -9999) and (vec.y ~= 0) and (vec.x <= 1024) and (vec.y <= 768)
end

function UICaption:ApplyScreenRatio(ele)
	local r = (1024/768)/(device().width/device().height)
	ele:SetWndSize(vector2():set(ele:GetWidth() * r,ele:GetHeight()))
end

function hud_active()
	if (HUD == nil) then
		HUD = HUDSubtitles()
		get_hud():AddDialogToRender(HUD)
	end
end

function hud_remove()
	if (HUD) then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function hud_update()
	if (HUD) then
		HUD:Update(true)
	end
end

-- From GhenTuong end

class "HUDSubtitles" (CUIScriptWnd)
function HUDSubtitles:__init() super()
    set_debug_level("dev")
    pr("init hud subtitles")
    self.xml = CScriptXmlInit()
    self.xml:ParseFile("ui_marker_hud_subtitles.xml")
    self.ratio = (1024 / 768) / (device().width / device().height)
    self.subtitles = {}
end

function HUDSubtitles:__finalize()
    for id, _ in pairs(self.subtitles) do
        self.subtitles[id] = nil
    end
end

function HUDSubtitles:Update()
    CUIScriptWnd.Update(self)
    set_debug_level("dev")
    local show_caption = main_hud_shown()
    local tg = time_global()

    for id, _ in pairs(subtitles.QUEUED_SUBTITLES) do
        if not contains(self.subtitles, id, true) then
            pr("adding new caption for: %s", id)
            self.subtitles[id] = UICaption(self, id)
        end
    end

    for id, caption in pairs(self.subtitles) do
        if contains(DESPAWNED_NPCS, id, true) then
            pr("removing despawned npc: %s", id)
            self.subtitles[id] = nil
            DESPAWNED_NPCS[id] = nil
        else
            caption:Update(show_caption)
        end
    end
end

-- Utils
function change_alpha(clr, a)
    if not clr and a ~= nil then return end

    if not clr_cache[clr .. "_" .. a] then
        local b = bit.band(clr, 255)
        local g = bit.band(bit.rshift(clr, 8), 255)
        local r = bit.band(bit.rshift(clr, 16), 255)
        clr_cache[clr .. "_" .. a] = GetARGB(a, r, g, b)
    end

    return clr_cache[clr .. "_" .. a]
end

function float2argb(clr, as_table)
    local argb = {
        [1] = bit.band(bit.rshift(clr, 24), 255),
        [2] = bit.band(bit.rshift(clr, 16), 255),
        [3] = bit.band(bit.rshift(clr, 8), 255),
        [4] = bit.band(clr, 255)
    }
    if as_table then
        return argb
    end
    return GetARGB(argb[1], argb[2], argb[3], argb[4])
end

function get_faction_clr(npc, opacity, colourblind_type, as_table)
    local faction = get_npc_faction(npc) or "default"
    local clr_tbl = ag_colours.faction_to_colour[faction]
    colourblind_type = not colourblind_type and "normal" or colourblind_type
    return get_colourblind_clr(clr_tbl, opacity, colourblind_type, as_table)
end

function get_colourblind_clr(clr_tbl, opacity, colourblind_type, as_table)
    local r, g, b = ag_colours.get_colourblind_rgb(colourblind_type, clr_tbl[1], clr_tbl[2], clr_tbl[3])
    if as_table then
        return {opacity, r, g, b}
    end
    return GetARGB(opacity, r, g, b)
end

function get_angular_dist(dist)
    return 2 * math.atan(1.8 / (2 * dist))
end

-- Callbacks

function on_first_update()
    set_debug_level("all")
    pr("adding hud")
	hud_active()
end

function on_net_destroy()
    set_debug_level("all")
    pr("removing hud")
	hud_remove()
end

function on_GUI_show()
    set_debug_level("all")
    pr("hide/showing hud")
	hud_update()
end

function collect_despawned_npcs(npc)
    set_debug_level("all")
    pr("despawning: %s", npc:id())
    local id = npc:id()
    if not contains(DESPAWNED_NPCS, id, true) then
        DESPAWNED_NPCS[id] = true
    end
end 

function on_option_change(options)
    -- FADE_TIME           = options["fade_time"]
    MAX_HEAR_DIST          = options["hear_dist"]
    -- MIN_CAPTION_OPACITY = options["min_caption_opacity"]
    -- MAX_CAPTION_OPACITY = options["max_caption_opacity"]
    COLOUR_BLIND_TYPE      = options["colour_blind_type"]
    ENABLE_FACTION_CLR     = options["enable_faction_clr"]
    ENABLE_BACKGROUND      = options["enable_background"]
    BACKGROUND_CLR         = options["background_colour"]

    if not ENABLE_FACTION_CLR then
        COLOUR_BLIND_TYPE = "normal"
    end
end


function on_game_start()
    RegisterScriptCallback("GUI_on_show",on_GUI_show)
	RegisterScriptCallback("GUI_on_hide",on_GUI_show)
	RegisterScriptCallback("actor_on_first_update",on_first_update)
	RegisterScriptCallback("actor_on_net_destroy",on_net_destroy)
    RegisterScriptCallback("npc_on_net_destroy", collect_despawned_npcs)
    RegisterScriptCallback("as_on_option_change", on_option_change)
end