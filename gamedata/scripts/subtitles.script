--[[-------------
Author(s): AntGlobes, Vodoxleb
Purpose: Subtitles Manager/Controller
Last Modified: 02/05/24
]]---------------


-- Imports
gts = game.translate_string
sound_duration = subtitles_utils.sound_duration
get_config = subtitles_mcm.get_config
factions = subtitles_utils.factions
slashes_to_underscores = subtitles_utils.slashes_to_underscores
locale = subtitles_utils.locale
split_subtitle = subtitles_utils.split_subtitle
mutants = subtitles_utils.mutants
remove_digits = subtitles_utils.remove_digits
extract_str = subtitles_utils.extract_str
subtitle_patterns = subtitles_utils.subtitle_patterns
find_suffix_num = subtitles_utils.find_suffix_num
activate_subtitles = subtitles_ui.activate_subtitles
has_translation = subtitles_utils.has_translation
subs_to_exclude = subtitles_utils.subs_to_exclude
is_actor_talking = subtitles_utils.is_actor_talking
is_ui_open = subtitles_utils.is_ui_open
contains = subtitles_utils.contains
get_nearby_npcs = subtitles_utils.get_nearby_npcs
dist_to_pos = subtitles_utils.dist_to_pos
news_manager_icons = news_manager.tips_icons
set_debug_level = subtitles_utils.set_debug_level
filter_debug_msg = subtitles_utils.filter_debug_msg
mutant_patterns = subtitles_utils.mutant_patterns
get_all_mutant_sections = subtitles_utils.get_all_mutant_sections
remove_end_digits = subtitles_utils.remove_end_digits
remove_trailing_underscore = subtitles_utils.remove_trailing_underscore
get_unknown_object = subtitles_utils.get_unknown_object
truncate = subtitles_utils.truncate

-- Constants
SUBTITLE_PREFIX = "as_sub_%s"
HUAMN_SUBTITLE_PREFIX = "characters_voice_human_%s"
SUSPEND_QUEUE = false
ini_news_tips = ini_file_ex("plugins\\news_tips_icons.ltx") -- Anomaly-Subtitles\gamedata\configs\plugins\mod_news_tips_icons_as.ltx
ini_script_sound = ini_file_ex("misc\\sound\\script_sound.ltx")
CHAR_LIMIT = 42
default_name = "st_noise"
default_mutant_name = "monster"
default_icon = "ui_iconsTotal_grouping"

-- MCM Default Options
local subs_enabled = true
local hearing_distance = 25
local hear_chance = 100
local hear_cooldown = 0
local hear_on_cd = false

-- DEBUGGING
local dbg_lvl = "dl_dev"

-- DEBUG Print
function pr(str, ...)
	-- filter out messages by debug level (Avoid console spam)
	if not filter_debug_msg(dbg_lvl) then return end
	subtitles_utils.dbg_pr("Subtitles|Main: %s", str, ...)
end

function set_debug_level(new_dbg_level)
	dbg_lvl = new_dbg_level
end

----------------------------------------
-- Queue Functions
----------------------------------------
local tmr = 0
local queue = {}
local length = 0

--- Remove and return from right of queue
function dequeue()
    return table.remove(queue, 1)
end

--- Insert into left of queue
---@param value any
function enqueue(value)
    table.insert(queue, value)
end

function requeue(value)
	suspend_queue()
	local temp = {}
	temp[1] = value
	for idx, entry in pairs(queue) do
		temp[idx + 1] = entry
	end
	queue = temp
	resume_queue()
end

function peek()
	return queue[queue_length()]
end

function sort_queue()
	local function by_distance(a, b)
		local queue_len = queue_length()
		if queue_len < 2 then return end
		if not (b["distance"] or a["distance"]) then return end
		return b["distance"] > a["distance"]
	end

	local function by_priority(a, b)
		local queue_len = queue_length()
		if queue_len < 2 then return end
		if not (b["priority"] or a["priority"]) then return end
		return b["priority"] > a["priority"]
	end

	table.sort(queue, by_distance)
	table.sort(queue, by_priority)
end

function print_queue()
	set_debug_level("dl_all")
	pr("-----------------------")
	pr("Printing Queue Contents")
	for idx, info in pairs(queue) do
		print_info(info)
	end
	pr("-----------------------")
end

--- Get queue length
function queue_length()
    return #queue
end

--- Check queue is not empty
function queue_has_entries()
	return queue_length() > 0
end

function suspend_queue()
	set_debug_level("dl_dev")
	SUSPEND_QUEUE = true
	local suspend_reason = is_ui_open() and "Inventory Open" or "Dialog Active" 
	pr("player", "%s, Suspending queue", suspend_reason)
end

function resume_queue()
	set_debug_level("dl_dev")
	local resume_reason = is_ui_open() and "Inventory Closed" or "Dialog Inactive" 
	if not is_queue_suspended() then pr("player", "%s, resuming queue", resume_reason) end
	SUSPEND_QUEUE = false
	tmr = tmr + (time_global() - tmr)
end

function is_queue_suspended()
	return SUSPEND_QUEUE
end

function truncate_subtitle(info)
	local infos = {}
	local sub_tokens = truncate(info["subtitle"], CHAR_LIMIT)
	for i=1, #sub_tokens do
		infos[i] = {
			speaker_name = info["speaker_name"],
			speaker_icon = info["speaker_icon"],
			speaker_faction = info["speaker_faction"],
			subtitle = sub_tokens[i],
			locale = info["locale"],
			duration = info["duration"] / #sub_tokens,
			xml_string_id = info["xml_string_id"],
			distance = info["distance"],
			position = info["position"],
			priority = i
		}
	end
	return infos
end

function ask_to_queue(info)
	CreateTimeEvent("subtitles_main"..math.random(1,10000),  "ask_to_queue"..math.random(1,10000), 0.1,
	function(info)
		set_debug_level("dl_player")
		if is_queue_suspended() then return false end
		if info["subtitle"] and #info["subtitle"] > CHAR_LIMIT then
			local new_infos = truncate_subtitle(info)
			for i=1, #new_infos do
				ask_to_queue(new_infos[i])
			end
			return true
		end
		enqueue(info)
		sort_queue()
		return true
	end, info)
end

function print_timer()
	set_debug_level("dl_all")
	pr("Current Time: %s", time_global())
	pr("Next possible display time: %s", tmr)
end

function build_info(soundname, npc)
	is_monster =  npc:is_monster()
	sect       =  npc:name()
	name       =  is_monster and get_mutant_name(sect) or npc:character_name()
	icon       =  is_monster and get_mutant_icon(sect) or npc:character_icon()
	faction    =  is_monster and default_mutant_name   or npc:character_community() --IsStalker(npc) and npc:character_community() or "monster"

	local info = {
		["speaker_name"] = is_monster and name or gts(name) or default_name,
		["speaker_icon"] = icon or default_icon,
		["speaker_faction"] = faction,
		["subtitle"] =  soundname_to_subtitle(soundname),
		["locale"] = get_locale(),
		["duration"] = get_sound_duration(soundname) or 3,
		["xml_string_id"] = strformat(SUBTITLE_PREFIX, normalize_soundname(soundname)),
		["distance"] = dist_to_pos(npc),
		["position"] = npc:position()
	}
	return info
end

--- Subtitle Callback: Build subtitle info and add to queue
---@param soundname string
---@param npc game_object
function subtitle_him(soundname, npc)
	if (not subs_enabled) then
		return
	end
	if  (hear_on_cd) then
		return
	end
	
	if (not (hear_chance > math.random(0,100))) then
		return
	end

	set_debug_level("dl_all")
	if not (npc:is_stalker() or npc:is_monster()) then pr("Not Stalker or Monster: %s", npc:name()) return end
	--build message according to distance and phrase
	if (npc:position():distance_to(db.actor:position()) <= hearing_distance) then
		local info = build_info(soundname, npc)
		ask_to_queue(info)
	end
end

-- Subtitle Controllers

--- Validate contents of info table
---@param info table
function verify_subtitle(info)
	set_debug_level("dl_dev")
	local verified = true
	local reason = ""

	for k, v in pairs(info) do
		if k == "speaker_name" then
			if type(v) ~= "string" then
				reason = strformat("Invalid Speaker name: %s", v)
				verified = false
			end
		elseif k == "speaker_icon" then
			if v == nil then
				reason = strformat("Invalid Speaker Icon: %s", v)
				verified = false
			end
		elseif k == "speaker_faction" then
			if v == nil then
				reason = strformat("Invalid Speaker Faction: %s", v)
				verified = false
			end
		elseif k == "subtitle" then
			if type(v) ~= "string" or #{string.find(v, "as_sub_")} > 0 or contains(subs_to_exclude, v) or not info[k] then
				reason = strformat("Invalid Subtitle: %s", v)
				verified = false
			end
		--elseif k == "locale" then
			
		elseif k == "duration" then
			if type(v) ~= "number" or v < 0 then
				reason = strformat("Invalid Duration: %s", v)
				verified = false
			end

		elseif k == "xml_string_id" then
			if type(v) ~= "string" or not has_translation(v) then
				reason = strformat("Invalid xml_string_id: %s", v)
				verified = false
			end
		elseif k == "position" then
			
			
		end
	end
	if not verified then
		set_debug_level("dl_all")
		pr("Subtitle not verified")
		subtitles_utils.collect_invalid_subs(info["xml_string_id"], reason)
	else
		pr("Subtitles Verified")
	end
	return verified 
end

--- Determine which display system to show subtitles in
---@param info table
function display_subtitles(info)
	set_debug_level("dl_dev")
	local debug_enabled = get_config("enable_debug")
	
	if get_config("enable_news_manager") then
		pr("Using News Manager for Subtitles")
		dynamic_news_helper.send_tip(info["subtitle"], info["speaker_name"], 0, info["duration"], get_speaker_icon(info), "news", "npc")
		db.actor:give_info_portion(info["xml_string_id"])

	elseif get_config("enable_subs") then
		pr("Using Subtitles HUD")
		activate_subtitles(info) 
	end

	set_debug_level("dl_all")
	pr("Printing to console")
	print_info(info)
end

function process_queue()
	local tg = time_global()	
	
	if is_queue_suspended() then
		-- Re-enable queue processing only if no dialog is currently open or the queue is empty
		if queue_has_entries() then
			if not (is_actor_talking() or is_ui_open()) then
				resume_queue()
			end
		elseif not queue_has_entries() then
			resume_queue()
		end
		return
	else
		-- Prevent queue from processing...
		-- if an inventory/dialog screen is open
		if is_actor_talking() or is_ui_open() then
			suspend_queue()
			return		
		end

		-- Reset timer and queue if no entries, resume only if suspended
		if not queue_has_entries() then
			tmr = 0
			return
		end

		set_debug_level("dl_all")
		-- queue timer
		if queue_has_entries() then
			pr("Processing Queue")	
			
			if tg > tmr then
				local info = dequeue()
				if not verify_subtitle(info) then return end
				display_subtitles(info)

				-- Set delay so next subtitle is shown after current
				local old_tmr = tmr
				tmr = ((info["duration"] + hear_cooldown + 0.025) * 1000) + tg
				pr("Setting new sub timer from: %s to: %s", old_tmr, (tmr) - tg)
				return
			
			-- If the current time hasn't reached the timer's value wait
			elseif tg < tmr then
				return
			end	
		end
	end
end

-- if not is_queue_suspended() then pr("Queue not suspended")


-- Soundname Manipulation

function soundname_to_path(soundname)
	return soundname:gsub('/','\\')
end

function normalize_soundname(soundname)
	local nml_sm = slashes_to_underscores(soundname)
    for _, pattern in pairs(subtitle_patterns) do        
        nml_sm = nml_sm:gsub(slashes_to_underscores(pattern), '')
	end
	return nml_sm
end

function soundname_to_subtitle(soundname)
	local x = strformat(SUBTITLE_PREFIX, normalize_soundname(soundname))
	local snd_name = game.translate_string(x)
	--subtitles_utils.collect_invalid_subs(x, soundname)
	return has_translation(x) and snd_name or nil
end
-- Subtitle Info Builders

function sort_mutant_sect_to_generic()
	generic_mutant_sect = {}
	local mutant_sections = get_all_mutant_sections()
	for i=1, #mutant_patterns do
		local mutant_name = mutant_patterns[i]
		for _, sect in pairs(mutant_sections) do
			if string.find(sect, mutant_name) then
				generic_mutant_sect[sect] = mutant_name
			end
		end
	end
end

function get_mutant_name(sect)
	set_debug_level("dl_all")
	if not sect then return end
	local no_digits = remove_end_digits(sect, '')
	local clean_sect = remove_trailing_underscore(no_digits, '')
	return generic_mutant_sect[clean_sect]
end

function get_mutant_icon(sect)
	set_debug_level("dl_dev")
	return ini_sys:r_string_ex(sect, "icon")
end

function get_speaker_icon(info)
	set_debug_level("dl_dev")
	speaker_icon = info["speaker_icon"]
	if get_config("use_localization") then
		manual_loc = string.find(info["locale"], "eng") and "eng_uk" or info["locale"]
		speaker_icon = ini_news_tips:r_value("news_tips_icons", info["locale"]) or "ui_icon_news_tip_subtitle_".. manual_loc
		pr("Speaker Icon:%s", speaker_icon)
	end
	return speaker_icon
end

function get_sound_duration(soundname)
	local mcm_option = get_config("sub_duration")
	if mcm_option  == "true_duration" then
		return sound_duration[slashes_to_underscores(soundname)]
	end
	local reading_speed = {
		["slow_reader"] = 7.0,
		["ok_reader"] = 3.5,
		["fast_reader"] = 1.25,}
	return reading_speed[mcm_option]	
end

function get_locale()
	return ui_options.get("other/localization")
end

function print_info(info)
	info_str = strformat("Speaker Name: '%s', Speaker Faction: '%s', Subtitle: '%s', Locale: '%s', Duration: '%s', XML String id: '%s, Distance: '%s", 
	info["speaker_name"], info["speaker_faction"], info["subtitle"], info["locale"], info["duration"], info["xml_string_id"], info["distance"])
	pr("Subtitle Info: %s", info_str)
end

-- Dev Debugging
base_set_sound_play = xr_sound.set_sound_play
function xr_sound.set_sound_play(npc_id, sound, faction, point)
	local npc = get_unknown_object({id=npc_id}, "game")
	if npc then
		local soundname = ini_script_sound:r_string_ex(sound, "path")
		if not has_translation(strformat(SUBTITLE_PREFIX, normalize_soundname(soundname))) then
			base_set_sound_play(npc_id, sound, faction, point)
			return
		end
		local info = build_info(soundname, npc)
		ask_to_queue(info)
	end
	base_set_sound_play(npc_id, sound, faction, point)
end


-- Callbacks
function on_option_change()
	subs_enabled = get_config("enable_subs")
	hearing_distance = get_config("hear_dist")
	hear_chance = get_config("hear_chance")
	hear_cooldown = get_config("hear_cooldown")
end

function on_game_start()
	RegisterScriptCallback("on_phrase_callback", subtitle_him)
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("actor_on_update", process_queue)
	RegisterScriptCallback("actor_on_first_update", sort_mutant_sect_to_generic)
	on_option_change()
end