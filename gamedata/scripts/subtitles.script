--[[-------------
Author(s): AntGlobes, Vodoxleb
Purpose: Subtitles Manager/Controller
Last Modified: 02/05/24
]]---------------


-- Imports
gts = game.translate_string
sound_duration = subtitles_utils.sound_duration
get_config = subtitles_mcm.get_config
factions = subtitles_utils.factions
slashes_to_underscores = subtitles_utils.slashes_to_underscores
locale = subtitles_utils.locale
split_subtitle = subtitles_utils.split_subtitle
mutants = subtitles_utils.mutants
remove_digits = subtitles_utils.remove_digits
extract_str = subtitles_utils.extract_str
subtitle_patterns = subtitles_utils.subtitle_patterns
find_suffix_num = subtitles_utils.find_suffix_num
activate_subtitles = subtitles_ui.activate_subtitles
has_translation = subtitles_utils.has_translation
subs_to_exclude = subtitles_utils.subs_to_exclude
is_actor_talking = subtitles_utils.is_actor_talking
is_ui_open = subtitles_utils.is_ui_open
contains = subtitles_utils.contains
get_nearby_npcs = subtitles_utils.get_nearby_npcs
dist_to_pos = subtitles_utils.dist_to_pos
default_icon = "ui_iconsTotal_grouping"
news_manager_icons = news_manager.tips_icons
default_name = "st_noise"
icon_exists = subtitles_utils.icon_exists

-- Constants
SUBTITLE_PREFIX = "as_sub_%s"
SUSPEND_QUEUE = false
ini_news_tips = ini_file_ex("plugins\\news_tips_icons.ltx") -- Anomaly-Subtitles\gamedata\configs\plugins\mod_news_tips_icons_as.ltx
CHAR_LIMIT = 42

-- MCM Default Options
local subs_enabled = true
local hearing_distance = 25
local hear_chance = 100
local hear_cooldown = 0
local hear_on_cd = false

-- DEBUG Print
function pr(str, ...)
	subtitles_utils.dbg_pr("Subtitles|Main: %s", str, ...)
end

----------------------------------------
-- Queue Functions
----------------------------------------

local queue = {}
local length = 0

--- Remove and return from right of queue
function dequeue()
    return table.remove(queue, 1)
end

--- Insert into left of queue
---@param value any
function enqueue(value)
    table.insert(queue, value)
end

function requeue(value)
	local temp = {}
	temp[1] = value
	for idx, entry in pairs(queue) do
		temp[idx + 1] = entry
	end
	queue = temp
end

function peek()
	return queue[queue_length()]
end

function sort_queue()
	local function by_priority(a, b)
		local queue_len = queue_length()
		if queue_len < 2 then return end
		if not (b["distance"] or a["distance"]) then return end
		return b["distance"] > a["distance"]
	end
	table.sort(queue, by_priority)
end

function print_queue()
	pr("-----------------------")
	pr("Printing Queue Contents")
	for idx, info in pairs(queue) do
		print_info(info)
	end
	pr("-----------------------")
end

--- Get queue length
function queue_length()
    return #queue
end

--- Check queue is not empty
function queue_has_entries()
	return queue_length() > 0
end

function suspend_queue()
	SUSPEND_QUEUE = true
	local suspend_reason = is_ui_open() and "Inventory Open" or "Dialog Active" 
	pr("%s, Suspending queue", suspend_reason) 
end

function resume_queue()
	local resume_reason = is_ui_open() and "Inventory Closed" or "Dialog Inactive" 
	if not is_queue_suspended() then pr("%s, resuming queue", resume_reason) end
	SUSPEND_QUEUE = false
end

function is_queue_suspended()
	return SUSPEND_QUEUE
end

--- Subtitle Callback: Build subtitle info and add to queue
---@param soundname string
---@param npc game_object
function subtitle_him(soundname, npc)
	if (not subs_enabled) then
		return
	end
	if  (hear_on_cd) then
		return
	end
	
	if (not (hear_chance > math.random(0,100))) then
		return
	end

	--build message according to distance and phrase
	if (npc:position():distance_to(db.actor:position()) < hearing_distance) then
		if not (npc:is_stalker() or npc:is_monster()) then pr("Not Stalker or Monster: %s", npc:name()) return end
			
		icon = npc:character_icon()
		name = npc:character_name()
		faction = npc:character_community() or "monster"
		
		local info = {
			["speaker_name"] = gts(name) or default_name,
			["speaker_icon"] = icon or default_icon,
			["speaker_faction"] = faction,
			["subtitle"] =  soundname_to_subtitle(soundname),
			["locale"] = get_locale(),
			["duration"] = get_sound_duration(soundname) or 3,
			["xml_string_id"] = strformat(SUBTITLE_PREFIX, normalize_soundname(soundname)),
			["distance"] = dist_to_pos(npc)
		}
		
		if is_queue_suspended() then return pr("Queue is Suspended can't add anymore subtitles") end
		enqueue(info)
		sort_queue()
	end
end

-- Subtitle Controllers

--- Validate contents of info table
---@param info table
function verify_subtitle(info)
	local verified = true

	for k, v in pairs(info) do
		if k == "speaker_name" then
			if type(v) ~= "string" then
				pr("Invalid Speaker name: %s", v)
				verified = false
			end
		elseif k == "speaker_icon" then
			if v == nil then
				pr("Invalid Speaker Icon: %s", v)
				verified = false
			end
		elseif k == "speaker_faction" then
			if v == nil then
				pr("Invalid Speaker Faction: %s", v)
				verified = false
			end
		elseif k == "subtitle" then
			if type(v) ~= "string" or #{string.find(v, "as_sub_")} > 0 or contains(subs_to_exclude, v) then
				pr("Invalid Subtitle: %s", v)
				verified = false
			end
		--elseif k == "locale" then
			
		elseif k == "duration" then
			if type(v) ~= "number" or v < 0 then
				pr("Invalid Duration: %s", v)
				verified = false
			end
		end
	end
	if not verified then
		subtitles_utils.collect_invalid_subs(info["subtitle"])
	end
	return verified 
end

--- Determine which display system to show subtitles in
---@param info table
function display_subtitles(info)
	if get_config("enable_news_manager") then
		pr("Using News Manager for Subtitles")
		dynamic_news_helper.send_tip(info["subtitle"], info["speaker_name"], 0, info["duration"], get_speaker_icon(info), "news", "npc")
		db.actor:give_info_portion(info["xml_string_id"])
	elseif get_config("enable_subs") then
		pr("Using Subtitles HUD")
		activate_subtitles(info) 
	else
		pr("Printing to console")
		print_info(info)
	end
end

local tmr = 0
function process_queue()
	-- Prevent queue from processing...
	-- if queue is suspended and has entries
	if is_queue_suspended() and not queue_has_entries() then
		tmr = 0
		resume_queue()
		return
	-- or if an inventory/dialog screen is open
	elseif is_actor_talking() or is_ui_open() then
		suspend_queue()
		return		
	elseif not queue_has_entries() then
		return
	end

	local info = dequeue()
	local subtitle = info["subtitle"]
	if not subtitle then return end
	if not verify_subtitle(info) then return end

	-- queue timer
	local tg = time_global()
	if not is_queue_suspended() and queue_has_entries() and tmr < tg then
		tmr = tg + info["duration"]
	elseif tmr >= tg then
		return
	end

	display_subtitles(info)
end

-- Soundname Manipulation

function soundname_to_path(soundname)
	return soundname:gsub('/','\\')
end

function normalize_soundname(soundname)
	local nml_sm = slashes_to_underscores(soundname)
    for _, pattern in pairs(subtitle_patterns) do        
        nml_sm = nml_sm:gsub(slashes_to_underscores(pattern), '')
	end
	return nml_sm
end

function soundname_to_subtitle(soundname)
	local x = strformat(SUBTITLE_PREFIX, normalize_soundname(soundname))
	local snd_name = game.translate_string(x)
	subtitles_utils.collect_invalid_subs(x, soundname)
	return has_translation(x) and snd_name or nil
end
-- Subtitle Info Builders

function extract_mutant_name(sect)
	if not sect then return end
	local rm_d = remove_digits(sect, '')
	local start, finish = string.find(sect, "_")
	local name = subtitles_utils.replace(rm_d, {rm_d:sub(start, #rm_d)}, '')
	pr("Monster Name: %s", name)
	return name
end

function get_speaker_icon(info)
	speaker_icon = info["speaker_icon"]
	if get_config("use_localization") then
		manual_loc = string.find(info["locale"], "eng") and "eng_uk" or info["locale"]
		speaker_icon = ini_news_tips:r_value("news_tips_icons", info["locale"]) or "ui_icon_news_tip_subtitle_".. manual_loc
		pr("Speaker Icon:%s", speaker_icon)
	end
	return speaker_icon
end

function get_sound_duration(soundname)
	local mcm_option = get_config("sub_duration")
	if mcm_option  == "true_duration" then
		return sound_duration[slashes_to_underscores(soundname)]
	end
	local reading_speed = {
		["slow_reader"] = 7.0,
		["ok_reader"] = 3.5,
		["fast_reader"] = 1.25,}
	return reading_speed[mcm_option]	
end

function get_locale()
	return ui_options.get("other/localization")
end

function count_sounds_of_this(path)
	path = soundname_to_path(path)
	local flag = true
	for count=1,100 do
		local snd 
		pcall(function()
			if not getFS():exist("$game_sounds$", path .. ".ogg") then return end
			snd = sound_object(path..count)
		end)
		if not snd then return end
		if snd:length() == 576 then
			return (count-1)
		end
	end
end

function print_info(info)
	info_str = strformat("Speaker Name: '%s', Speaker Faction: '%s', Subtitle: '%s', Locale: '%s', Duration: '%s', XML String id: '%s, Distance: '%s", 
	info["speaker_name"], info["speaker_faction"], info["subtitle"], info["locale"], info["duration"], info["xml_string_id"], info["distance"])
	pr("Subtitle Info: %s", info_str)
end
 
-- Callbacks
function on_option_change()
	subs_enabled = get_config("enable_subs")
	hearing_distance = get_config("hear_dist")
	hear_chance = get_config("hear_chance")
	hear_cooldown = get_config("hear_cooldown")
end

function on_game_start()
	RegisterScriptCallback("on_phrase_callback", subtitle_him)
	RegisterScriptCallback("on_option_change", on_option_change)
	RegisterScriptCallback("actor_on_update", process_queue)
	on_option_change()
end